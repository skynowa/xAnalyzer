/**
 * \file  Config.h
 * \brief config
 */


#pragma once

using namespace xl;

#include <xLib/xLib.h>
//-------------------------------------------------------------------------------------------------
const std::ctstring_t appName = xT("@PROJECT_NAME@");
//-------------------------------------------------------------------------------------------------
/**
 * Analyzer types
 */
enum class TypeActive
{
	TYPE_CPPCHECK        = 1,
	TYPE_CLANG_TIDY      = 2,
	TYPE_CLANG_TIDY_DIFF = 3,
	TYPE_CLANG_TIDY_FILE = 4,
	TYPE_ACTIVE          = TYPE_CPPCHECK
};
xUSING_CONST(TypeActive);

/**
 * Check mode
 * 0 - check changed files and headers
 * 1 - check only changed files
 */
cbool_t QUICK_CHECK = true;

/**
 * Set OS environment variable to disable checks
 * From shell: export ANALYZER_SKIP_CHECK=1
 *
 * 0 - enable checks
 * 1 - skip checks
 *
 * SKIP_CHECK = os.environ.get("ANALYZER_SKIP_CHECK")
 */
cbool_t SKIP_CHECK = true;

/**
 * Disallow committing when errors/warnings occur
 * 0 - allow commit
 * 1 - disallow commit
 */
cbool_t STOP_ON_FAIL = false;

/**
 * C++ language / standart
 */
std::ctstring_t CPP_LANG = "c++";
std::ctstring_t CPP_STD  = "c++11";

/**
 * Exclude files for checking
 */
std::cvec_tstring_t CPP_MASK = {".h", ".hh", ".hpp", ".inl", ".cc", ".cpp", ".cxx"};

/**
 * Cppcheck
 */
std::ctstring_t CPPCHECK_ERROR_LEVEL = "warning,missingInclude";

/**
 * Compiler types
 */
enum class CompilerId
{
	COMPILER_ID_UNKNOWN = 0,
	COMPILER_ID_CLANG   = 1,
	COMPILER_ID_GCC     = 2
};
xUSING_CONST(CompilerId);

/**
 * Project root directory
 */
std::ctstring_t PROJECT_DIR = "~/Projects/xLib";

/**
 * TODO: Number of jobs (Cppcheck support only)
 */
std::csize_t JOBS_NUM = 1;
//-------------------------------------------------------------------------------------------------
